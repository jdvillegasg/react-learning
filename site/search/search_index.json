{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"BackendLibs/","title":"Hono","text":""},{"location":"BackendLibs/#installation","title":"Installation","text":"<pre><code>    bun install hono\n</code></pre>"},{"location":"BackendLibs/#usage","title":"Usage","text":"<p>Create separate file in directory with:</p> <pre><code>    import { Hono } from 'hono'\n    const app = new Hono()\n\n    app.get('/test', (c) =&gt; c.text('Hono!'))\n\n    export default app\n</code></pre> <p>The object <code>c</code> is called the Context object, and contains all the HTTP information to be goten or posted.</p> <p>Implement the routes of your choice (i.e. <code>/test</code> in the example above).</p> <p>Then in your <code>Bun</code> server: <pre><code>    Bun.serve({\n        fetch: app.fetch,\n    });\n</code></pre></p>"},{"location":"BackendLibs/#middleware","title":"Middleware","text":""},{"location":"BackendLibs/#logger","title":"Logger","text":"<p>Logs the following details for each request:</p> <ul> <li>Incoming Request: HTTP method, request path, and incoming request.</li> <li>Outgoing Response:HTTP method, request path, response status code, and request/response times.</li> <li>Status Code Coloring: Response status codes are color-coded for better visibility and quick identification of status categories. Different status code categories are represented by different colors.</li> <li>Elapsed Time: time taken for the request/response cycle is logged in a human-readable format, either in milliseconds (ms) or seconds (s).</li> </ul>"},{"location":"BackendLibs/#rpc","title":"RPC","text":"<p>Allows to set types in both the backend and fronted.</p>"},{"location":"BackendLibs/#zod","title":"Zod","text":"<p>We can create a Zod validation schema by using <code>z</code>:</p> <p>Zod validation schema</p> <p>```jsx import { z } from \"zod\" const schema = z.object(     {         key1: z.string.min(3).max(50), // z types         key2: z.number().int().positive()     } )</p>"},{"location":"BackendLibs/#tanstack-former-react-query","title":"Tanstack (former React Query)","text":"<p>Asynchronous state management for TS/JS and React (among others). </p> <pre><code>bun add @tanstack/react-query\n</code></pre> <p>Follow the instructions in the <code>Quick start</code> page of the Tanstack Query documentation.</p> <ul> <li>Wrap the frontend app in a <code>QueryClientProvider</code>.</li> <li>Use the <code>useQuery</code> hook to </li> </ul> <p>Tanstack useQuery hook</p> <pre><code>1\n</code></pre>"},{"location":"BackendLibs/#tanstack-router","title":"Tanstack Router","text":"<p>Tanstack for file-based routing.</p> <pre><code>bun install @tanstack/react-router\n</code></pre> <p>and Vite plugihn</p> <pre><code>bun install --save-dev @tanstack/router-vite-plugin @tanstack/router-devtools\n</code></pre> <p>Follow the instructions in the <code>Quick start</code> page of the Tanstack Router documentation:</p> <ul> <li>Cofigure the Vite Plugin</li> <li>Create the <code>src/routes/__root.tsx</code>, <code>src/routes/index.tsx</code> and <code>src/routes/about.tsx</code>, with the template described in the Tanstack Router <code>Quickstart</code> page.</li> <li>Modify the <code>src/main.tsx</code> file</li> </ul> Loader Tanstack Router <pre><code>export const Route = createFileRoute(\"/expenses\")({\n    component: Expenses,\n    loader:\n});\n</code></pre> <p>Load in your content before the actual page is seen (people sees a loading state before the actual page).</p>"},{"location":"BackendLibs/#tanstack-form","title":"Tanstack Form","text":"<pre><code>bun add i @tanstack/react-form\n</code></pre>"},{"location":"BackendLibs/#login-authentication","title":"Login authentication","text":""},{"location":"BackendLibs/#kinde","title":"Kinde","text":"<p>Auth and user management. This functionality is better implemented in the backend than in the frontend.</p> <ul> <li>Sign up and log in</li> <li>When asked create a new business</li> <li>Choose the Backend &gt; Node.js </li> <li>Choose Email and Google (or as many social authentication services you want)</li> </ul> <p>Don't have an SDK to work with Bun or Hono, but you can follow the TypeScript SDK docs.</p> <ul> <li>Install <code>bun install @kinde-oss/kinde-typescript-sdk</code></li> <li>Copy the <code>kindeClient</code> code for NodeJS</li> <li>Add the routes as shown in the TypeSript SDK docs for NodeJS, but replace the <code>express</code> syntax with the <code>Hono</code> syntax.</li> <li>Copy the <code>sessionManager</code></li> </ul>"},{"location":"Cat-generator/","title":"Cat generator","text":""},{"location":"ExpenseTracker/","title":"Tech stack","text":"<ul> <li>Bun: JS runtime </li> <li>Hono: HTTP server handling</li> <li>Zod: validation types</li> </ul>"},{"location":"ExpenseTracker/#installations","title":"Installations","text":""},{"location":"ExpenseTracker/#bun","title":"Bun","text":"<p>On windows:</p> <pre><code>    powershell -c \"irm bun.sh/install.ps1 | iex\"\n</code></pre>"},{"location":"ExpenseTracker/#hono","title":"Hono","text":"<pre><code>    bun install hono\n</code></pre> <p>Zod validator:</p> <p>Zod functionality already integrated into Hono:</p> <pre><code>    bun add @hono/zod-validator\n</code></pre>"},{"location":"ExpenseTracker/#zod","title":"Zod","text":"<pre><code>    bun install zod\n</code></pre>"},{"location":"ExpenseTracker/#create-the-bun-server","title":"Create the Bun server","text":"<pre><code>    bun init\n</code></pre> <p>Enter the name of the package and of the entry point or press enter to let Bun set it to the default names.</p>"},{"location":"ExpenseTracker/#set-start-and-dev-scripts-for-bun","title":"Set start and dev scripts for Bun","text":"<p>Add this to the <code>package.json</code> to set text identifiers for Bun operations:</p> <pre><code>    //...\n    \"scripts\": {\n        \"start\": \"bun index.ts\",\n        \"dev\": \"bun --watch index.ts\"\n    },\n    //...\n</code></pre>"},{"location":"ExpenseTracker/#directory-structure","title":"Directory structure","text":"<p>The <code>routes</code> directory provide routes for the endpoints:</p> <ul> <li><code>expenses.ts</code>: handle reqs to its endpoint</li> </ul> <p>We can add a route to our <code>Bun</code> server by adding:</p> <pre><code>    app.route(\"/api/expenses\", expensesRoute)\n</code></pre> <p>where here, <code>/api/expenses</code> is the endpoint name, and <code>expensesRoute</code> is a <code>Hono</code> instance handling <code>GET</code>, <code>POST</code> and more type of requests:</p> <pre><code>    import { Hono } from \"hono\"\n    export const expensesRoute = new Hono()\n    .get(\"/\", (c) =&gt; {\n    return c.json({ expenses: [] });\n    });\n    .post(\"/\", (c) =&gt; {\n    return c.json({});\n    });\n</code></pre>"},{"location":"ExpenseTracker/#deployment","title":"Deployment","text":"<p>The backend server will serve also the fronted. Therefore, the <code>package.json</code> file for the backend (when created the bun project) should be in the outer folder of the app.</p> <p>To deploy succesfully with this approach the following folder structure should be used:</p> <ul> <li>expense-tracker/<ul> <li><code>package.json</code> \"serves the <code>index.ts</code> file\" </li> <li><code>tsconfig.json</code></li> <li><code>README.md</code></li> <li><code>.gitignore</code></li> <li>backend/<ul> <li>routes/<ul> <li><code>route1.ts</code></li> <li><code>route2.ts</code></li> </ul> </li> <li><code>app.ts</code></li> <li><code>index.ts</code></li> </ul> </li> <li>frontend/<ul> <li>dist/  \"Generated by <code>bun build</code>\"</li> <li>all vite frontend files</li> </ul> </li> </ul> </li> </ul>"},{"location":"ExpenseTracker/#features","title":"Features","text":"<p>*</p>"},{"location":"FullStack/","title":"Backend","text":""},{"location":"FullStack/#bun","title":"Bun","text":"<p>Create a Bun project with <code>bun init</code>. </p>"},{"location":"FullStack/#client-side-rendered-single-page-app-with-vite","title":"Client Side Rendered Single Page App with Vite","text":""},{"location":"FullStack/#development","title":"Development","text":"<p>There are two different servers used: one for the frontend (i.e. vite) and another one for the backend (i.e. bun)</p>"},{"location":"FullStack/#production","title":"Production","text":"<p>To host the frontend and the backend in the same place, an easy way to do it is by placing the frontend files inside the backend (API) server.</p>"},{"location":"FullStack/#apporach-in-development","title":"Apporach in development","text":"<p>To mimic the behavior of using just one server for both frontend and backend, it is possible to proxy request from the frontend to the backend.</p> <p>For example, if the backend is at <code>localhost:3000/api</code> and the frontend is at <code>localhost:5173</code>:</p> <ul> <li> <p>We can first handle requests to frontend endpoints, i.e. <code>localhost:5173/api</code></p> </li> <li> <p>And then forward the frontend request to our backend endpoint, i.e. <code>localhost:3000/api</code>.</p> </li> </ul> <p>As a consequence of this approach, our frontend fetches will request to <code>/api</code> instead of requesting to <code>https://localhost:3000/api</code>.</p> <p>To forward the frontend request to the backend, we create a proxy server in the <code>vite.config.js</code> file, by adding the following:</p> <p>Forward requests to backend server in development</p> <pre><code>//...\nserver: {\n    proxy: {\n        \"/api\": {\n            target: \"http://localhost:3000\",\n            changeOrigin: true,\n        },\n    },\n},\n//...\n</code></pre>"},{"location":"FullStack/#approach-in-production","title":"Approach in production","text":"<p>We need to have a plan for building and serving the frontend app from the backend server app (i.e. Hono).</p> <p>First we build the frontend application:</p> <pre><code>bun run build\n</code></pre> <p>This will create a <code>dist/assets</code> folder with the transpiled and minimezd files required to run the application. All the frontend can be served by using the <code>dist</code> folder.</p> <p>Then, we extend the backend server (i.e. Hono bun) to serve the frontend whenever the user requests an API route that doesn't match any of the ones existing in the backend server:</p> <pre><code>app = new Hono()\napp.get(\"/my-backend-endpoint\", myHonoRoute)\n//...\n// Serve the frontend if API route different to all existing routes\napp.get(\"*\", serveStatic({ root: \"./frontend/dist\" }));\napp.get(\"*\", serveStatic({ path: \"./frontend/dist/index.html\" }));\n// ...\n</code></pre> <p>In the above example, the static files generated by building the frontend app are stored in the <code>dist</code> directory of our <code>frontend</code> directory.</p> <p>To check if it works, you can search the url of the backend (i.e. <code>localhost:3000</code>) and it should show the frontend app.</p>"},{"location":"FullStack/#deployment","title":"Deployment","text":""},{"location":"FullStack/#flyio","title":"Fly.io","text":"<p>Failure</p> <p>Requires credit card on May/2024</p> <ul> <li> <p>Register on Fly.io</p> </li> <li> <p>Install <code>flyctl</code> by running on the PowerShell:</p> </li> </ul> <pre><code>    pwsh -Command \"iwr https://fly.io/install.ps1 -useb | iex\"\n</code></pre> <p>or</p> <pre><code>    powershell -Command \"iwr https://fly.io/install.ps1 -useb | iex\"\n</code></pre> <ul> <li>Run <code>fly launch</code> from the directory containing your frontend and backend folders.</li> </ul> <p>This will produce a <code>Dockerfile</code> and a <code>fly.toml</code> file.</p> <ul> <li> <p>Run <code>fly deploy</code> </p> </li> <li> <p>Each time changes in the frontend are done, we need to run <code>bun run build</code> in the frontend folder, to produce the updated <code>dist/</code> folder. </p> </li> </ul> <p>After doing so, we need to deploy the backend (that in this approach will serve the the frontend). In this case, as mentioned before, we do that by running <code>fly deploy</code>.</p> <p>These two steps can be merged by modifying the <code>Dockerfile</code>:</p> <pre><code># Install frontend node modules\nCOPY --link frontend/bun.lockb frontend/package.json ./frontend/\nRUN cd frontend &amp;&amp; bun install --ci\n\n# Copy application code\nCOPY --link . .\n\n# Change to frontend directory and build the frontend app\nWORKDIR /app/frontend\nRUN bun run build\n\n# Remove all files in frontend except for the dist folder\nRUN find . -mindepth 1 ! -regex '^./dist\\(/.*\\)?' -delete\n</code></pre>"},{"location":"GettingStarted/","title":"Install frameworks, tools and libraries","text":""},{"location":"GettingStarted/#material-for-mkdocs","title":"Material for mkdocs","text":"<ul> <li>Install the python package</li> </ul> <pre><code>pip install mkdocs-material\n</code></pre> <ul> <li>Create the mkdocs for the folder</li> </ul> <pre><code>mkdocs new [dir-name]\n</code></pre> <p>or</p> <pre><code>mkdocs new .\n</code></pre> <ul> <li>Start the live-reloading docs server</li> </ul> <pre><code>mkdocs serve\n</code></pre> <ul> <li>Build the documentation site</li> </ul> <pre><code>mkdocs build\n</code></pre>"},{"location":"GettingStarted/#react-using-vite","title":"React using Vite","text":"<ul> <li>Create the project</li> </ul> <pre><code>npm create vite@latest\n</code></pre> <ul> <li>Once under the folder, install the dependiencies for the project</li> </ul> <pre><code>npm install\n</code></pre>"},{"location":"GettingStarted/#run-a-test-with-playwright","title":"Run a test with Playwright","text":"<ul> <li>Create a new Playwright project for testing the code</li> </ul> <pre><code>npm init playwright@latest\n</code></pre> <ul> <li> <p>Follow the CLI. It will create the folder <code>tests</code> and the file <code>example.spec.js</code> under that folder.</p> </li> <li> <p>Run the tests</p> </li> </ul> <pre><code>npx playwright test\n</code></pre>"},{"location":"GettingStarted/#tailwind-with-vite-and-react","title":"Tailwind with Vite and React","text":"<ul> <li>Under the folder of the created project run</li> </ul> <pre><code>npm install -D tailwindcss postcss autoprefixer\n</code></pre> <ul> <li>Create a tailwind config file</li> </ul> <pre><code>npx tailwindcss init -p\n</code></pre> <ul> <li>Add in your config file</li> </ul> <p>Configure template paths</p> <pre><code>/** @type {import('tailwindcss').Config} */\n    module.exports = {\n    content: [\n        \"./src/**/*.{js,jsx,ts,tsx}\",\n    ],\n    theme: {\n        extend: {},\n    },\n    plugins: [],\n    }\n</code></pre> <ul> <li>Add tailwind directives in the <code>index.css</code> file</li> </ul> <pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre>"},{"location":"GettingStarted/#shadcn-with-vite-and-react","title":"Shadcn with Vite and React","text":"<ul> <li>Create a <code>jsconfig.json</code> file (if using TypeScript the file will be named <code>tsconfig.json</code>) and add the following contents:</li> </ul> <p>Create jsconfig.json</p> <pre><code>{\n    \"compilerOptions\": {\n        // ...\n        \"baseUrl\": \".\",\n        \"paths\": {\n        \"@/*\": [\n            \"./src/*\"\n        ]\n        }\n            // ...\n    }\n}\n</code></pre> <p>Prettier with Markdown</p> <p>If you have the \"Prettier\" extension for VS Code, add a <code>.prettierignore</code>file at the root of your project/s and add the files or folders you don't want \"Prettier\" to format. For example, in this case, all this documentation folder have been added to the <code>.prettierignore</code> file, so that it doesn't format Markdown by default.</p> <ul> <li>Update the <code>vite.config.js</code> file by adding modifications shown as follows:</li> </ul> <p>Update vite.config.js</p> <pre><code>import path from \"path\"\nimport react from \"@vitejs/plugin-react\"\nimport { defineConfig } from \"vite\"\n\nexport default defineConfig({\nplugins: [react()],\nresolve: {\n    alias: {\n    \"@\": path.resolve(__dirname, \"./src\"),\n    },\n},\n})\n</code></pre> <ul> <li> <p>Run <code>npx shadcn-ui@latest init</code> and follow the CLI.</p> </li> <li> <p>Install the components you want to install: i.e. <code>npx shadcn-ui@latest add button label</code></p> </li> </ul>"},{"location":"GettingStarted/#test-packages","title":"Test packages","text":"<p>To test your applications the following packages might be useful:</p> <p><code>vitest</code></p> <p>Run <code>npm install vitest -D</code> and then modify the <code>package.json</code>file of your project to include the <code>test</code> key and the value <code>vitest</code>under the <code>scripts</code> key.</p> <p><code>happy-dom</code></p> <p>Provides a headless-alike-browser. After installing it with <code>npm install happy-dom</code>, go to <code>vite.config.js</code>file and after the <code>plugin</code> key add the following snippet:</p> <pre><code>test: {\n    environment: \"happy-dom\",\n  },\n</code></pre> <p><code>testing-library</code></p> <p>Utilities library to test applications. Install it by executing <code>npm install @testing-library/react</code>.</p>"},{"location":"GettingStarted/#install-eslint-with-typescrit","title":"Install eslint with typescrit","text":"<p>Execute <code>npx eslint --init</code></p>"},{"location":"GoogleTranslateClon/","title":"Requirements","text":"<p>We need to store or keep track of: * Input and output languages * Text to translate and translated text * If its loading the translation or not</p> <p>Instead of dealing with these through separate <code>useState</code> statements, we create an <code>useReducer</code>. Before, we create an object to store the mentioned things we need to keep track of.</p> <p>Then, we need to define the actions will be performed to change the object:</p> <ul> <li>User change input and output languages</li> <li>User change input language textbox content</li> </ul>"},{"location":"GoogleTranslateClon/#used-libraries","title":"Used libraries","text":"<ul> <li>React bootstrap</li> </ul>"},{"location":"Movies-search-with-API/","title":"Webapp for searching movies","text":"<p>The API to use:</p> <p>OMDB</p> <p>with the following <code>API_KEY</code>:</p> <p>4287ad07</p>"},{"location":"Movies-search-with-API/#requirements","title":"Requirements","text":"<ul> <li> <p>Minimal components for the app are a search bar and a button.</p> </li> <li> <p>Should provide a list of title, year and poster for related movies to the search.</p> </li> <li> <p>Movies should be shown in a responsive grid.</p> </li> </ul>"},{"location":"Movies-search-with-API/#v10","title":"V1.0","text":"<ul> <li>Avoid a search is done twice in a row.</li> <li>Make the seach to be done automatically after finsih writing.</li> <li>Avoid the search to be done while writing.</li> </ul>"},{"location":"React-Router/","title":"Custom React Router","text":"Goals of the project <ul> <li>Create a way of making SPAs (Single Page Applications)</li> <li>Functionality to navigate among pages by pressing web browser's <code>back</code> button.</li> </ul> Code progress"},{"location":"React-Router/#first-approach","title":"First approach","text":"<p>A first approach to redirect the user to another page when the page hyperlink is clicked, would be to use conditional rendering as shown below.</p> Redirect pages <pre><code>/* Define the pages with components*/\nfunction HomePage() {\n    return (&lt;&gt;&lt;/&gt;)\n}\nfunction AboutPage() {\n    return (&lt;&gt;&lt;/&gt;)\n}\n\nfunction App(){\n    const [currPath, setCurrPath] = useState(window.location.pathname)\n\n    /* Use conditional rendering to redirect to About and Home pages */\n    &lt;main&gt;\n        {currPath === '/' &amp;&amp;  &lt;HomePage&gt;&lt;/HomePage&gt; }\n        {currPath === '/about' &amp;&amp;  &lt;AboutPage&gt;&lt;/AboutPage&gt; }\n    &lt;/main&gt;\n}\nexport default App\n</code></pre> <p>However, in this way, the whole page is being rendered each time the user clicks in an hyperlink.</p>"},{"location":"React-Router/#second-approach","title":"Second approach","text":"<p>To cope for this we create a <code>navigate</code> method with the following functionality:</p> <ul> <li>Change the URL </li> <li>Create a new event</li> <li>Dispatch the event for whichever (element) wanting to listen it.</li> </ul> navigate method <pre><code>const NAVIGATION_EVENT = 'pushstate'\nfunction navigate(href) {\n    window.history.pushState({}, '', href)\n    const navigationEvent = new Event(NAVIGATION_EVENT)\n    window.dispatchEvent(navigationEvent)\n}\n</code></pre> <p>Then an <code>useEffect()</code> is used to bind the event listener to a callback, only when the page is loaded (empty dependencies).</p> Bind event listener to callback <pre><code>useEffect(() =&gt; {\n    const onLocationChange = () =&gt;{\n        setCurrPath(window.location.pathname)\n    }\n\n    window.addEventListener(NAVIGATION_EVENT, onLocationChange)\n\n    //remove the event\n    return () =&gt; {\n        window.removeEventListener(NAVIGATION_EVENT, onLocationChange)\n    }\n}, [])\n</code></pre> <p>And finally, in this second approach, the user will trigger the event (call the <code>navigate</code> method) by pressing a button, provoking the callback defined in the <code>useEffect()</code>. The callback just sets the <code>currPath</code> state defined in our previous approach.</p> trigger the event with user interaction <pre><code>`&lt;button onClick={()=&gt;navigate('/')}&gt;`Go to Home`&lt;/button&gt;`\n...\n`&lt;button onClick={()=&gt;navigate('/about')}&gt;`Go to About`&lt;/button&gt;`\n</code></pre> <p>To see how this changes have actually affected the loading behaviour in the web browser, next animation shows that when pressing the <code>Go to about</code> button, only the required information is loaded into the page (in this case the picture):</p> Only required data is loaded"},{"location":"React-Router/#third-approach","title":"Third approach","text":"<p>Up to now, the buttons that redirect to other pages, don't allow the user to open the links in new browser windows or tabs, since there is no menu available when the user right-clicks on them, or when the user presses <code>command</code> + click.</p> <p>This is the reason why it is not advisable to use a button as the element providing navigation to different routes.</p> <p>To overcome that we replace the button with an anchor element.</p> <p>And to avoid the default action of the anchor (to load the entire page again), we call the <code>preventDefault()</code> method inside the anchor click event handler (<code>handleClick()</code>).</p>"},{"location":"React-Router/#testing-with-vitest-happy-dom-and-testing-library","title":"Testing with vitest, happy-dom and testing-library","text":"<p>The first test detects if our <code>Router</code> component doesn't render at all:</p> <pre><code>it(\"should render without problems\", () =&gt; {\n    render(&lt;Router routes={[]} /&gt;);\n    expect(true).toBeTruthy();\n  });\n</code></pre> <p>The second test detects if the <code>404</code> component is rendered when the user enters an URL that wasn't considered:</p> <pre><code> it(\"should render 404 if no routes match\", () =&gt; {\n    render(&lt;Router routes={[]} defaultComponent={() =&gt; &lt;h1&gt;404&lt;/h1&gt;} /&gt;);\n\n    // Searches a component whose having the text given by params\n    expect(screen.getByText(405)).toBeTruthy();\n  });\n</code></pre> <p>The third test detects if the corresponding componet for the input URL is rendered:</p> <pre><code>vi.mock(\"./utils.js\", () =&gt; ({\n  getCurrentPath: vi.fn(),\n}));\n\n...\n\nit(\"should render the component of the first route that matches\", () =&gt; {\n    getCurrentPath.mockReturnValue(\"/about\");\n\n    const routes = [\n      {\n        path: \"/about\",\n        Component: () =&gt; &lt;h1&gt;About&lt;/h1&gt;,\n      },\n      {\n        path: \"/\",\n        Component: () =&gt; &lt;h1&gt;Home&lt;/h1&gt;,\n      },\n    ];\n\n    render(&lt;Router routes={routes} /&gt;);\n    expect(screen.getByText(\"About\")).toBeTruthy();\n  });\n</code></pre>"},{"location":"ReduxCrud/","title":"Used libraries","text":"<ul> <li>Tremor for usable <code>React</code> components:</li> </ul> <pre><code>npm add @tremor/react -E\n</code></pre> <ul> <li> <p>Heroicons</p> </li> <li> <p>Tailwind</p> </li> </ul> <p>Recommended way of using Redux is by installing Redux Toolkit.</p> <pre><code>npm install @reduxjs/toolkit react-redux -E\n</code></pre> <ul> <li>Sonner:</li> </ul> <pre><code>npm install sonner -E\n</code></pre>"},{"location":"ReviewCSS/","title":"CSS","text":"<p>CSS class-less frameworks.</p> <p>They provide over-basic styles to start your application.</p> <p>Common examples are pages like:</p> <p>Bolt CSS</p> <p>Water CSS</p>"},{"location":"ReviewCSS/#flex-box-layout","title":"Flex box layout","text":"<p>What is it?</p> <p>\"In the flex layout model, the children of a flex container can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent\". <sup>1</sup></p> <p><code>justify-content: space-between</code></p> <p>Use the <code>justifify-content</code> property to define the distribution of space between and around the main axis of the flex container.</p> change due to justify-content <p>The main axis is the direction of the flex container defined by the <code>flex-direction</code> property. Can be either: <code>row</code>, <code>row-reverse</code>, <code>column</code>, <code>column-reverse</code>.</p> <p>The cross axis is the direction orthogonal to the main axis.</p> <p>Use the <code>align-items</code> property to control the alignment of items over the cross axis</p> <p>Flex layout example</p> <pre><code>display: flex\njustify-content: space-between\nflex-direction: row\nalign-items: center\n</code></pre> <p>In the example above, the children of the flex container will be placed in a row. They will be placed in the cross axis (the height direction) at the center of the container.</p>"},{"location":"ReviewCSS/#grid-layout","title":"Grid layout","text":"<p>\"Like tables, grid layout enables an author to align elements into columns and rows\". <sup>2</sup></p> <p>The grid can be controlled by multiple attributes, but some of the common ones are: </p> <ul> <li><code>grid-template-columns</code> and <code>grid-template-rows</code>define the number and spacing of columns and rows.</li> </ul> <p>Grid layout</p> <pre><code>grid-template-columns: 1fr 2fr 3fr 1fr\n</code></pre> <p>In the example above, the container will have 4 columns such that the 2nd column will be twice the width of the 1st and 4th column and the 3rd column will be three times the width of the 1st and 4th.</p> <p>Grid layout</p> <pre><code>grid-template-columns: repeat(auto-fit, minmax(200px, 1fr))\n</code></pre> <p>In the example above, we are setting the number of columns in the container based on the available space(<code>auto-fit</code>) and how many columns can fit in that space if they are either 200px width or 1 fraction.</p> <ul> <li><code>grid-auto-columns</code> and <code>grid-auto-rows</code> define the size of columns or rows.</li> </ul> <p>Grid layout</p> <pre><code>grid-auto-rows: minmax(30px, auto)\n</code></pre> <p>In the example above, the container rows will be between 30px height each one and the maximum height among the rows in the container.</p>"},{"location":"ReviewCSS/#properties","title":"Properties","text":"<p><code>aspect-ratio: 16/9</code> </p> <p>Indicates the width to height ratio of an element's box. It can be used to cope for the differences in widths or heights of the elements of a container.</p> change due to aspect-ratio <p>For example, in the picture above, the elements in a grid layout container, have different heights, but by setting the same aspect-ratio to all the elements of the container, they will have the same height.</p> <p><code>object-fit: cover</code></p> <p>Sets how the element's content should be resized to fit its container.</p> change due to object-fit <p>Continuing with the previous example, the <code>aspect-ratio</code> was able to make the elements of the container of the same height, but it distorted the original images. To cope for this, <code>object-fit</code> resizes the image again (zooms in) to alleviate the distortion while keeping the same element's height.</p> <p><code>backdrop-filter: blur(10px)</code></p> <p>\"Lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything behind the element, to see the effect the element or its background needs to be transparent or partially transparent\" <sup>3</sup></p> <p><code>transition: all 0.5s ease</code></p> <p>The entered values correspond to the <code>property name</code>, the <code>duration</code> and the <code>easing function</code>.</p> <p><code>z-index: 1</code></p> <p>Elements with larger <code>z-index</code> will cover those with a lower one.</p> <p><code>scale: 0.7</code></p> <p>Transform an element (typically an image) by scaling it (or shrinking it). If two arguments are provided, it specifies the resizing of the element in each axis.</p> <p><code>.cart ~ .cart-button</code></p> <p>The sub-sequent sibling selector, selects all elements that are siblings (belong to the same parent element) of the first element (<code>.cart</code> in the title).</p> <ol> <li> <p>Flexbox layout CSS \u21a9</p> </li> <li> <p>Grid layout CSS \u21a9</p> </li> <li> <p>Backdrop filter property \u21a9</p> </li> </ol>"},{"location":"ReviewGit/","title":"Git","text":"Check status <pre><code>git status\n</code></pre>"},{"location":"ReviewHTML/","title":"HTML","text":""},{"location":"ReviewHTML/#good-practices","title":"Good practices","text":"<ul> <li> <p>Encapsulate a <code>form</code> element (with its <code>input</code> and <code>button</code>) within a <code>header</code> element, when it works like a search bar, where the results are shown later in the <code>main</code> section.</p> </li> <li> <p>Always that you use an <code>input</code> and a <code>button</code> elements, enclosed them in a <code>form</code> element.</p> </li> <li> <p>Check if the context read by the <code>useContext</code> hook is undefined, and if so, throw an error.</p> </li> </ul>"},{"location":"ReviewHTML/#tags","title":"Tags","text":"<p><code>&lt;input&gt;</code></p> <p><code>form</code> </p> <p>When <code>button</code> is used with <code>form</code>, it should be of type <code>type=\"submit\"</code></p> <p>\"The <code>svg</code> is a container that defines a new coordinate system and viewport. It is used as the outermost element of SVG documents, but it can also be used to embed an SVG fragment inside an SVG or HTML document\".<sup>1</sup></p> <p>svg tag</p> <pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\"&gt;\n&lt;/svg&gt;\n</code></pre> <p>\"The  SVG element is the generic element to define a shape. All the basic shapes can be created with a path element\" <sup>2</sup> <p>A form can also be submitted without a button. For instance, by pressing <code>ENTER</code> in an input text field, enclosed in a form, the submit event of the form will be triggered.</p> <p><code>&lt;label&gt;</code></p> <p>Represents a caption for an item, that can be used with an <code>&lt;input&gt;</code> element. The attribute <code>for</code>(or <code>htmlFor</code>) should be the value of the <code>id</code> attribute of the <code>&lt;input&gt;</code> element.</p> <p>Use cases:</p> <p>\"When a user clicks or touches/taps a label, the browser passes the focus to its associated input (the resulting event is also raised for the input)\" <sup>3</sup> </p> <p><code>&lt;header&gt;</code></p> <p>Banner-like element for introductory information.</p> <p>Use cases:  * Define a global site header  * Banner with logo, company name, search bar.</p> <p><code>&lt;select&gt;</code></p> <p>Provides a menu with different options to choose from.</p> <p><code>&lt;option&gt;</code></p> <p>Is used with the <code>&lt;select&gt;</code> element. Specifies an option to select. Its <code>value</code> attribute specifies the value to be used by the server when that option is chosen.</p> <p><code>&lt;footer&gt;</code></p> <p>Footer element, typically containing information about authorship, copyright data, contact and more.</p> <p><code>&lt;main&gt;</code></p> <p>\"The <code>main</code> HTML element represents the dominant content of the <code>body</code> of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application\". <sup>4</sup></p> <p><code>&lt;pre&gt;</code></p> <p>Displays HTML text as it is (as HTML text).</p> <ol> <li> <p>SVG tag \u21a9</p> </li> <li> <p>Path SVG tag \u21a9</p> </li> <li> <p>Usability label tag \u21a9</p> </li> <li> <p>Main tag \u21a9</p> </li> </ol>"},{"location":"ReviewJS/","title":"JS","text":""},{"location":"ReviewJS/#operators","title":"Operators","text":"<p>Optional chaining (<code>?</code>)</p> <p>Can be used when it is unknown if an object's property or function exists. It tells the system to not throw any error, when it doesn't, and instead returns an <code>undefined</code> value.</p> <p>Spread syntax</p> <p>Access the elements of an iterable. It is useful, for example, when you want to access the elements of an array (that is a React state), but do not want to change the state itself.</p> <p>Spread syntax example 1</p> <pre><code>const [movies, setMovies] = useState()\n[...]movies.sort()\n</code></pre> <p>In the code above, <code>[...]movies.sort()</code> does not change the state of <code>movies</code>, whereas if you use <code>movies.sort()</code>, the state of <code>movies</code> will change (to the new sorted value).</p> <p>Spread syntax example 2</p> <pre><code>const animal = {'name': 'elephant', 'size': 150}\n{...animal, size: 450}\n// Last line returns:\n// {name: 'elephant', size: 450}\n</code></pre>"},{"location":"ReviewJS/#common-methods","title":"Common methods","text":"<p><code>slice(start, end-1)</code> </p> <p>Access the elements indexed by params of an array.</p> <p>Use of slice</p> <pre><code>const animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];\nconsole.log(animals.slice(2,4))\nArray ['camel', 'duck']\n</code></pre> <p><code>structuredClone(value)</code></p> <p>Creates a deep clone (a copy) of a given value.</p> <p>Use case:</p> <p>When a state must be changed but can't be modified directly.</p> <p><code>window.history.pushState()</code></p> <p>Adds an entry to the browser's session history.</p> <p><code>filter(Boolean)</code> trick</p> <p>The filter method iterates over an array and returns the entries of the array fulfilling the condition. </p> <p>If we have an array of objects and want to access one of the object's key, if the array has also <code>null</code> or <code>undefined</code> entries, the filter method won't work. We can then execute the <code>filter(Boolean)</code> \"trick\" to remove those type of entries and then perform the normal filtering we planned to do.</p> <pre><code>const array = [{ good }, null, { great }, undefined]\n\nconst truthyArray = array.filter(Boolean)\n// truthyArray = [{ good }, { great }]\n</code></pre> <p><code>map</code> </p> <p>Can be used as well for Objects by retrieving the key/value pairs of the object:</p> <pre><code>Object.entries(myObject).map(([key, val])=&gt;{\n... // the code to execute on each object entry\n})\n</code></pre>"},{"location":"ReviewJS/#events","title":"Events","text":"<p><code>dispatchEvent()</code></p> <p>\"Unlike \"native\" events, which are fired by the browser and invoke event handlers asynchronously via the event loop, <code>dispatchEvent()</code> invokes event handlers synchronously. All applicable event handlers are called and return before <code>dispatchEvent()</code> returns\" <sup>1</sup> </p> <p>Users can create their own events by invoking the class <code>Event</code> and dispatch the event in the <code>DOM</code>:</p> <p>Create a custom event</p> <pre><code>    const myEvent = new Event('event-name)\n    window.dispatchEvent(myEvent)\n</code></pre> <p><code>pushstate</code></p> <p>Event of the History interface that adds an entry to the browser's session history.</p> <p><code>popstate</code></p> <p>Event of the Window interface that is fired when the user pushes the <code>back</code>button in the browser </p> <p><code>preventDefault()</code></p> <p>Event default action would not be performed, so that the developer handles it.</p> <p><code>Modified events</code></p> <p>Modified events are events trigger by an user interaction (i.e. a click) that also are modified by another user interaction (i.e. user presses the <code>CTRL</code>key in the keyboard, while clicking).</p> <p><code>Event bubbling</code></p> <p>In a component with nested elements the deeper element will trigger the event and subsequente outer elements will trigger their respective events (if any).</p> <p>\"The most deeply nested element that caused the event is called a target element, accessible as <code>event.target</code>\" <sup>2</sup></p>"},{"location":"ReviewJS/#web-api","title":"Web API","text":"<p><code>FileReader()</code></p> <p>Lets web applications reade asynchronously the contents of files. </p> <p>\"FileReader can only access the contents of files that the user has explicitly selected, either using an HTML  element or by drag and drop. It cannot be used to read a file by pathname from the user's file system. To read files on the client's file system by pathname, use the File System Access API. To read server-side files, use fetch(), with CORS permission if reading cross-domain.\" <sup>2</sup></p> <p><code>FormData()</code></p> <p>\"The FormData interface provides a way to construct a set of key/value pairs representing form fields and their values, which can be sent using the fetch(), XMLHttpRequest.send() or navigator.sendBeacon() methods.\" <sup>3</sup></p> <ol> <li> <p>Dispatch Event \u21a9</p> </li> <li> <p>FileReader \u21a9\u21a9</p> </li> <li> <p>FormData \u21a9</p> </li> </ol>"},{"location":"ReviewNodeJS/","title":"Node.js environment","text":""},{"location":"ReviewNodeJS/#good-practices","title":"Good practices","text":"<ul> <li>When fetching a page which returns json objects, create a folder named <code>mocks</code> under the <code>src</code> folder of the project, and create two types of <code>.json</code> files:<ol> <li>One that serves as an example of a typical response.</li> <li>One that serves as an example of a not available response.</li> </ol> </li> </ul>"},{"location":"ReviewNodeJS/#bun-runtime","title":"Bun runtime","text":""},{"location":"ReviewNodeJS/#package-manager","title":"Package manager","text":"<p>You can use Bun as a package manager like <code>npm</code> or <code>yarn</code> or so on.</p> <p>For example, to install <code>Hono</code>:</p> <pre><code>    bun install hono\n</code></pre>"},{"location":"ReviewNodeJS/#http-server","title":"HTTP server","text":"<p>Start a Bun Server</p> <pre><code>Bun.serve({\n//port: 8080, // defaults to $BUN_PORT, $PORT, $NODE_PORT otherwise 3000\n//hostname: \"mydomain.com\", // defaults to \"0.0.0.0\"\nfetch(req) {\n    return new Response(\"El server de Bun anda corriendo\");\n},\n});\n</code></pre>"},{"location":"ReviewReact/","title":"React","text":""},{"location":"ReviewReact/#required","title":"Required","text":"<p>A list of React components or html elements that is defined in a recursion, like the shown in the following snippet of code:</p> Wrong listing of React elements/components<pre><code>movies.map(x =&gt; (\n    &lt;li ...&gt;\n    ...\n    &lt;/li&gt;\n))\n</code></pre> <p>requires a <code>key</code> property with an unique identifier. In the example above, we would require to change the <code>&lt;li&gt;</code> element like this:</p> Correct listing of React elements/components<pre><code>movies.map(x =&gt; (\n    &lt;li key={uniqueID} ...&gt;\n    ...\n    &lt;/li&gt;\n))\n</code></pre>"},{"location":"ReviewReact/#syntax","title":"Syntax","text":"<p><code>...props</code></p> <p>When passing <code>...whatevername</code> to a React component it is a way of specifying variable number of parameters to the component. It can be used, for example, to pass props to a specific html element to customize its style as in the next example:</p> ... syntax <pre><code>// Create the component\nexport function MyComp({a, b, ...props}) {\n    //Functionality\n    return &lt;a {...props}&gt;\n}\n\n&lt;MyComp a=\"MyPropA\" b=\"MyPropB\" className={bg-slate-200}&gt;\n</code></pre>"},{"location":"ReviewReact/#methods","title":"Methods","text":"<p><code>lazy</code></p> <p>Allows to dynamically import components, so that if they are not needed (in use) they are not rendered.</p>"},{"location":"ReviewReact/#components","title":"Components","text":"<p><code>Suspense</code></p> <p>Enclose the components loaded with <code>lazy</code>.</p>"},{"location":"ReviewReact/#hooks","title":"Hooks","text":"<p><code>useState()</code></p> <p>Holds something (can be an object, an array,...), that when changed by the the setter function, renders the component.</p> <p>useState good example</p> <pre><code>const [count, setCount] = React.useState(0)\nconst incrementCount = () =&gt; setCount((previousCount) =&gt; previousCount + 1)\n// Last line is equivalent to:\nconst incrementCount = () =&gt; setCount(count + 1)\n</code></pre> <p>In the example above, the feature of passing a function to the <code>useState</code> whose argument is the last value of the state, is called functional update.</p> <p><code>useRef()</code> </p> <p>Can be used to have a mutable reference to an HTML element. It works similarly to <code>useState</code> but doesn't render again the component when its <code>.current</code> property, holding the saved value, change.</p> useRef example <pre><code>const inputRef = useRef()\n&lt;input ref={useRef}&gt;&lt;/input&gt;\n</code></pre> <p><code>useMemo()</code></p> <p>Will execute its body only when the list of dependencies has changed. This could be done also by combining the <code>useEffect</code> and the <code>useRef</code> hooks.</p> <p><code>useCallback()</code> </p> <p>Is like an <code>useMemo</code> but for defining a function. Internally it makes use of <code>useMemo</code>.</p> useCallback example <pre><code>useCallback()\n</code></pre> <p><code>useId()</code></p> <p>Will create an unique ID based on the order in which the components are called.</p> <p><code>useContext()</code></p> <p>In the figure below, the React components <code>Footer</code> and <code>Filters</code> require states and functions from a custom hook. If children components of require the same states and functions, we will have to keep passing them through the props of each child component. This is known as prop drilling. </p> <p>The <code>useContext()</code> hook avoids this situation</p> illustration of useContext in the shopping cart tutorial developed by midudev <p>Figure retrieved from <sup>1</sup>.</p> <p>Below is shown an example of usage of <code>useContext()</code>. </p> <p>useContext() usage example part 1</p> <pre><code>import { createContext } from 'react'\n// Creates the context to be consumed\nexport function NameOfContext = createContext()\n// Creates the Provider giving access to shared data\nexport function MyComponent ({children}){\n    &lt;NameOfContext.Provider value={{dataToShare}}&gt;\n    {children}\n    &lt;/NameOfContext.Provider&gt;\n}\n</code></pre> <p>The two previous steps have to be completed by, what is known as consuming the context:</p> <p>useContext() usage example part 2\"</p> <pre><code>import { NameOfContext } from 'path/to/context'\n// This will access the data shared by the context\nconst accessSharedData = useContext(NameOfContext)\n</code></pre> <p>Also, the component should encapsulate all the components or elements that require to access the shared data.</p> <p>useContext() usage example part 3\"</p> <pre><code>import { MyComponent } from 'path/to/component'\n// This will access the shared data by the context\n&lt;MyComponent&gt;\n    {//Everything that is encapsulated here will have access to the data shared by the context}\n&lt;/MyComponent&gt;\n</code></pre> <p>It is either convenient (or required - to be checked -) to create a custom hook to use the context. If that is the case, the custom hook must be called from within the context provider component (any component encapsulated by it).</p> <p>Use cases: If used to share a global state, <code>useContext()</code> is thought to be used when the states are small or are not called too often (i.e. user session).</p> <p><code>useReducer()</code></p> <p>Receives an initial state and a callback to perform on different types of actions. As in the <code>useState()</code> method, the state can be anything. The action can be an object whose elements are the action name (or an action identifier, i.e. a string identifying the action to perform) and the action payload (or the information, in the form of an object, array, ..., to be used for each action identifier).</p> <p>It is defined as follows:</p> <p>useReducer() usage</p> <pre><code>const [state, dispatch] = useReducer(reducer, initialState)\n\nconst addToCart = (product) =&gt;{\n    dispatch({\n        type: 'ADD_TO_CART'  // Action identifier\n        payload: product\n    })\n}\n</code></pre> <p>The following two code snippets show a comparisson between three functionalities of a Shopping Cart application, with and without the reducer.</p> Example functionalities without the useReducer() <pre><code>const addToCart = (product) =&gt; {\n    const productInCart = cart.findIndex((entry)=&gt; entry.id === product.id)\n\n    if (productInCart &gt;= 0) {\n        const newCart = structuredClone(cart)\n        newCart[productInCart].quantity += 1\n        return setCart(newCart)\n    }\n    setCart((previousState) =&gt; ([\n        ...previousState,\n        {\n            ...product,\n            quantity: 1\n        }\n    ]))\n}\nconst clearCart = () =&gt; {\n    setCart([])\n}\nconst removeFromCart = (product) =&gt; {\n    setCart(previousState =&gt; previousState.filter(entry =&gt; entry.id !== product.id))\n}\n</code></pre> Example functionalities with useReducer() <pre><code>const reducer = (state, action) =&gt; {\nconst {type: actionType, payload: actionPayload} = action\nconst { id } = actionPayload\n\nswitch (actionType) {\n    case \"ADD_TO_CART\": {        \n        const productInCartIndex = state.findIndex((entry)=&gt; entry.id === id)\n        if (productInCartIndex &gt;= 0) {\n            const newState = structuredClone(state)\n            newState[productInCartIndex].quantity += 1\n            return newState\n        }\n        return [\n            ...state,\n            {\n                ...actionPayload,\n                quantity: 1\n            }\n        ]\n    }\n    case \"REMOVE_FROM_CART\": {\n        return state.filter((entry) =&gt; entry.id !== id)\n    }\n    case \"CLEAR_FROM_CART\": {\n        return initialState\n    }            \n}\nreturn state\n}\n</code></pre> <ol> <li> <p>Tienda y Carrito con React + Estado Global con useContext + Manejo de estado con useReducer \u21a9</p> </li> </ol>"},{"location":"ReviewRedux/","title":"Store","text":"<p>The store folder/place is where, precisely, we store our variables/state.</p> <p>First we call the <code>configureStore</code> method:</p> <p>configureStore</p> <pre><code>export const store = configureStore({\n    reducer: {},\n});\n</code></pre> <p>Then we need to wrap our application into a Provider (as it is done with the native React Context):</p> <p>Wrap provider into app</p> <pre><code>import { store } from \"./store/index.ts\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n    &lt;Provider store={store}&gt;\n        &lt;App /&gt;\n    &lt;/Provider&gt;\n);\n</code></pre> <p>As Redux can be used to store the state appearing in many different components, we call <code>slices</code> the partitions of the store refering to one specific source/class/category of states we want to manage.</p> <p>We create a slice in our <code>store</code> folder by typing:</p> <p>Create slice</p> <pre><code>import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const usersSlice = createSlice({\nname: \"users\",\ninitialState: 0,\nreducers: {},\n});\n</code></pre> <p>Then we have to call the reducer from the <code>slice</code> into the store:</p> <p>Incorporate slice reducer in store</p> <p><code>jsx export const store = configureStore({ reducer: {     users: usersSlice.reducer, }, });</code>'</p> <p>To retrieve the partitioned state from the slice:</p> <p>Get state of slice</p> <p>```jsx import {useSelector} from \"react-redux\" const myconstname = useSelector(state =&gt; state.users)</p> <p>In this case the attribute <code>users</code> of <code>state</code> corresponds to the name we gave in the previous step to one of the reducers.</p> <p>To manage the types of the state created by Redux (when using TypeScript), we can first create a type for what can be called the <code>RootState</code> (the state comprised of all slices/partitioned states):</p> <p>Typing the root state</p> <pre><code>export type RootState = ReturnType&lt;typeof store.getState&gt;\n</code></pre>"},{"location":"ReviewRedux/#middleware","title":"Middleware","text":"<p>As the state is initialized back to its original state each time the site is refreshed, a middleware allows to persist the state.</p> <p>A middleware calls a function that calls a function that calls a function:</p> <p>Structure of a middleware</p> <pre><code>const myMiddleware = (store) =&gt; (next) =&gt; (action) =&gt; {\n    ...\n}\n</code></pre> <p>The reason why all the callbacks are not done in the first callback, is because, due to the nature of the middleware, these subsequent callbacks are done at different times. </p> <p>More specifically, we can use a middleware to execute some code just before the state is udpated, and just after the state is udpated.</p> <p># Reducers</p> <p>Are implemented on the file where our <code>slice</code> is saved. The logic of the reducer can be implemented there as well. Here an example of doing so:</p> <p>Reducers</p> <pre><code>export const usersSlice = createSlice({\nname: \"users\",\ninitialState,\nreducers: {\n    deleteUserById: (state, action: PayloadAction&lt;UserId&gt;) =&gt; {\n    const id = action.payload;\n    return state.filter((entry) =&gt; entry.id !== id);\n    },\n    addNewUser: (state, action: PayloadAction&lt;User&gt;) =&gt; {\n    const id = crypto.randomUUID();\n    return [...state, { id, ...action.payload }];\n    },\n},\n});\n</code></pre> <p>In the example above, there are two reducers (<code>addNewUser</code> and <code>deleteUserById</code>), which receive by parameters the <code>state</code> and some <code>action</code>.</p> <p>It is possible to type the action with a Redux Toolkit native type for the payload (<code>PayloadAction</code>).</p>"},{"location":"ReviewRedux/#mutating-the-state","title":"Mutating the state","text":"<p>In Redux Toolkit it is not necessary to create a new state (as when returning it in a reducer), but the state can be modified/mutated:</p> <p>Mutating the state</p> <pre><code>// Return new state\nconst newState = [...state, action.payload]\nreturn newState\n// Mutate the state\nstate.push(action.payload)\n</code></pre>"},{"location":"ReviewTailwind/","title":"Number","text":"<p>Each number in Tailwind represents 4px or 0.25rem.</p>"},{"location":"ReviewTailwind/#class-attributes","title":"Class attributes","text":"<p><code>w-</code> </p> <p>Sets the width of the element. Options include absolute width (i.e <code>w-1</code>, <code>w-2</code>, <code>w-10</code>), relative width (i.e <code>w-1/5</code>, <code>w-2/5</code>, <code>w-full</code>).</p> <p><code>max-w-</code></p> <p>Sets the maximum width of the element.</p> <p><code>m-</code></p> <p>Sets all margin elements to the specified value after the <code>-</code>. </p> <p><code>mx</code></p> <p>Sets the horizontal margins to the specified value after the <code>-</code>.</p> <p><code>mx-auto</code></p> <p>Sets the horizontal margin to auto, therefore centering the element.</p> <p><code>text-</code></p> <p>Text related properties. Among them are text size, text color, and so on.</p> <p><code>space-y-</code></p> <p>Controls the space between (only between) vertical elements.</p> <p><code>space-x</code> </p> <p>Equivalently to <code>space-y</code>, controls the space between (only between) horizontal elements.</p>"},{"location":"ReviewTailwind/#breakpoint-prefix","title":"Breakpoint prefix","text":"<p>Applies changes to style after the breakpoint rule is set. Breakpoint rules are related to the screen size. Used for Responsive Design. </p> <p>By default, TailwindCss targets mobile screens.</p>"},{"location":"ReviewTypescript/","title":"ReviewTypescript","text":"<p>TypeScript is just a super set of Javascript to add static types to it.</p> <p>One of the most important things to remember about TypeScript is that it does NOT make any data validation by itself, because TypeScript is not executed in the browser. Since only Javascript is executed in the browser, TypeScript works as a tool to check for type errors only in the code development process.</p> <p>Basic types are infered by TypeScript and thus are not required to be typed.</p>"},{"location":"ReviewTypescript/#common-functions","title":"Common functions","text":"<p><code>any</code></p> <p>When used this, TypeScript ignores typing.</p> <p><code>typeof</code></p> <p>To get the type of basic types.</p> <p><code>instanceof</code></p> <p>To get the type of instances of classes.</p>"},{"location":"ReviewTypescript/#functions","title":"Functions","text":""},{"location":"ReviewTypescript/#object-params","title":"Object params","text":"<p>When the parameter is an object, there are two ways of defining its type:</p>"},{"location":"ReviewTypescript/#first-way","title":"First way","text":"<pre><code>function sayHi({name, age}:{name: string, age:number}) {}\n</code></pre>"},{"location":"ReviewTypescript/#second-way","title":"Second way","text":"<pre><code>function sayHi( person :{name: string, age: number}){\n    const {name, age} = person\n}\n</code></pre>"},{"location":"ReviewTypescript/#function-params","title":"Function params","text":"<p>The semicolon operator is used to type a function as in a regular parameter. The difference is that an arrow function is used to define the type of the params of the param function and the return type of the param function:</p> <pre><code>const ssayHiFromCallback = (myfun: (name:string)=&gt;void) =&gt;{\n    myfun(\"Julian)\n}\n\nconst sayHi = (name:string) =&gt;{\n    console.log(name)\n}\n\nsayHiFromCallback(sayHi)\n</code></pre>"},{"location":"ReviewTypescript/#return-types","title":"Return types","text":"<p>TypeScript does inference on the type of the returned object/value. However, if the return type needs to be explicitly stated, it should be done after the parentheses enclosing the parameters:</p> <pre><code>function sayHi({name, age}: {name: string, age: number}): number{\n    return age\n}\n</code></pre> <p>or in these 2 ways for arrow functions:</p> <pre><code>const sayHi = ({name, age}: {name: string, age: number}, verbose:string): number =&gt;{\n    return age\n}\n</code></pre> <p>or </p> <pre><code>const sayHi : ({name, age}: {name: string, age: number}, verbose:string) =&gt; number = ({name, age}, verbose) =&gt;{\n    return age\n}\n</code></pre>"},{"location":"ReviewTypescript/#type-alias","title":"Type Alias","text":"<p>The type of the object is defined by using the keyword <code>type</code> as in:</p> <pre><code>type Hero = {\n    name: string\n    age: number\n}\n</code></pre> <p>Notice that there is no comma in between the object keys.</p> <p>Later we can use this type definition in our code:</p> <pre><code>let hero: Hero = {\n    name: \"thor\",\n    age: 1500\n}\n\nfunction createHero(name: string, age: number):Hero {\n    return {name, age}\n}\n\nconst thor = createHero(\"Thor\", 1500)\n\n// Or equivalently\nfunction createHero (myhero: Hero):Hero {\n    const {name, age} = myhero\n    return {name, age}\n}\n\nconst ironman = createHero({name:\"ironman\", age: 45})\n</code></pre>"},{"location":"ReviewTypescript/#optional-properties","title":"Optional properties","text":"<p>By passing the operator <code>?</code> to the key in an object type definition, the key is defined as an optional property that might be used or not. </p> <pre><code>type Hero = {\n    name: string\n    age: number\n    isActive?: boolean\n}\n\nfunction createHero(myhero: Hero):Hero {\n    const {name, age} = myhero\n    // The property isActive of the type Hero is used here, since we  in the function definition its return type was defined to be of Hero type.\n    return {name, age, isActive: true} \n}\n</code></pre>"},{"location":"ReviewTypescript/#io-in-properties","title":"I/O in properties","text":"<p>Properties can be defined to be <code>readonly</code>, <code>and</code> in object type defintion. For example in the following case, we will have issues :</p> <pre><code>type Hero = {\n    id?: number\n    name: string\n    age: number\n    isActive: boolean\n}\nfunction createHero(myhero: Hero):Hero {\n    const {name, age} = myhero\n    return {name, age, isActive: true}\n}\nconst thor = createHero({name: \"ironman\", age:45})\n\nthor.id = 5547\n</code></pre> <p>Despite <code>id</code> being a property of the object type <code>Hero</code>, when defining the function <code>createHero</code> the returned object did not include it.</p> <p>We can therefore avoid this happening by defining the property <code>id</code> as a <code>readonly</code> property:</p> <pre><code>type Hero = {\n    readonly id?: string\n    name: string\n    age: number\n    isActive?: boolean\n}\n</code></pre>"},{"location":"ReviewTypescript/#template-union-types","title":"Template Union Types","text":"<p>Below is an example of usage of the template union types for creating an id that is expected to be a concatenation of 5 strings with <code>-</code> in between them.</p> <pre><code>type HeroId = `${string}-${string}-${string}-${string}-${string}`\n\ntype Hero = {\n    readonly id?: HeroId\n    name: string\n    age: number\n    isActive?: boolean\n}\n</code></pre>"},{"location":"ReviewTypescript/#union-types","title":"Union types","text":"<p>As seen in the example below, the <code>|</code> operator allows to the type to be defined as of a union of different types.</p> <pre><code>type HeroPowerScale = 'local' | 'planetary' | 'galactic' | 'universal' | 'multiversal' | 'omnipresent'\n</code></pre> <p>Note that in the example the types are specific string types (i.e. <code>planetary</code>), which means that, for example, the assignation ``let jhon: HeroPowerScale = 'high'```will throw a TypeScript error.</p>"},{"location":"ReviewTypescript/#intersection-types","title":"Intersection types","text":"<p>Useful for extending types.</p> <pre><code>type HeroBasicInfo = {\n    name: string\n    age: number\n}\n\ntype HeroExtendedInfo = {\n    readonly id?: HeroId\n    isActive?: boolean\n    powerScale?: HeroPowerScale\n}\n\ntype Hero = HeroBasicInfo &amp; HeroExtendedInfo\n\nfunction createHero(myhero: HeroBasicInfo): Hero {\n    const {name, age} = myhero\n    return {id: crypto.randomUUID(), name, age, isActive: true}\n}\n</code></pre>"},{"location":"ReviewTypescript/#type-indexing","title":"Type Indexing","text":"<pre><code>type HeroProperties = {\n    isActive?: boolean\n    address: {\n        planet: string\n        city: string\n    }\n}\n\nconst addressHero: HeroProperties['address'] = {\n    planet: \"earth\",\n    city: \"Cali\"\n}\n</code></pre>"},{"location":"ReviewTypescript/#arrays","title":"Arrays","text":"<pre><code>// One way to define the type\nconst languages: string[] = []\n\n// Another way to define the type\nconst languages: Array&lt;string&gt; = []\n\n// Union type in the array definition\nconst languages: (string | number)[] = []\n\n// Array of your own types\nconst heroes: Hero[] = []\n</code></pre>"},{"location":"ReviewTypescript/#array-of-arrays-and-tuples","title":"Array of arrays and tuples","text":"<pre><code>type CellValue = 'O' | 'X' | ''\ntype GameBoard = [\n    [CellValue, CellValue, CellValue],\n    [CellValue, CellValue, CellValue],\n    [CellValue, CellValue, CellValue]\n]\nconst gameBoard: GameBoard = [\n    ['X', 'O', 'X'],\n    ['O', '', ''],\n    ['X','','O']\n]\n</code></pre> <p>Example of a tuple in React:</p> <pre><code>type State = [string, (newName: string)=&gt; void]\nconst [hero, setHero] = useState(\"thor\")\n</code></pre>"},{"location":"ReviewTypescript/#static-tuple","title":"Static tuple","text":"<pre><code>type RGB = readonly [number, number, number]\n</code></pre>"},{"location":"ReviewTypescript/#enums","title":"Enums","text":"<p>Can be compiled to Javscript, depending on how they are defined. If defined as follows, they will be compiled</p> <pre><code>enum ERROR_TYPES = {\n    NOT_FOUND,\n    UNAUTHORIZED,\n    FORBIDDEN\n}\n</code></pre> <p>If defined as follows, the will NOT be compiled:</p> <pre><code>const enum ERROR_TYPES = {\n    NOT_FOUND,\n    UNAUTHORIZED,\n    FORBIDDEN\n}\n</code></pre>"},{"location":"ReviewTypescript/#type-assertions","title":"Type assertions","text":"<pre><code>// We loose the \"null\" return type when asserting it is an HTMLCanvasElement\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement\n// x THIS IS WRONG, because getElementById can return a \"null\":\nconst canvas : HTMLCanvasElement = document.getElementById('canvas')\n// Even this will give a TypeScript error\nconst canvas : HTMLCanvasElement | null = document.getElementById('canvas')\n</code></pre> <p>A good practice is to assert the type of the <code>HTMLElement</code> return type of <code>getElementById</code>, after we check it is not null:</p> <pre><code>if (canvas !== null){\n    const ctx = (canvas as HTMLCanvasElement).getContext('2d')\n}\n</code></pre> <p>However, if by an accident or mistake the developer retrieves a different element than a canvas:</p> <pre><code>const canvas = document.getElementById(\"span\")\n</code></pre> <p>when executing the assertion <code>canvas as HTMLCanvasElement</code> there will be a JavaScript error that TypeScript was not able to detect. We can therefore, further check that the return element is a canvas element by using <code>instanceof</code>:</p> <pre><code>if (canvas !== null &amp;&amp; canvas instanceof HTMLCanvasElement){\n    ...\n}\n</code></pre>"},{"location":"ReviewTypescript/#assertions-when-fetching","title":"Assertions when fetching","text":"<pre><code>const API_URL = \"https://api.github.com/search/repositories?q=javascript\"\nconst response = await fetch(API_URL)\nif(!response.ok){\n    throw new Error(\"request failed)\n}\nconst data = await response.json()\nconst repos = data.items.map(repo=&gt; {console.log(repo)})\n</code></pre> <p>In the example above TypeScript infers the type of <code>response</code> since it knows the return type of the native <code>fetch</code> function. However, it doesn't know the type of <code>data</code> since the json returned by <code>response.json</code> can have properties of any type. Precisely <code>any</code> is the type infered by TypeScript for <code>data</code>. </p> <p>A first step to type <code>data</code> would be:</p> <pre><code>// Array of opjects\ntype GithubAPIResponse = {\n    items: object[]\n}\n\n//...\n\nconst data = await response.json() as GithubAPIResponse\n</code></pre>"},{"location":"ReviewTypescript/#interfaces","title":"Interfaces","text":"<p>Its usage is similar to the the use of <code>type</code>, but have minor differences inclusions. For example, we first define a <code>Shoe</code>type using intersection types:</p> <pre><code>type Product {\n    id: number\n    name: string\n    price: number\n    quantity: number\n}\ntype Size {\n    size: number\n}\n\ntype Shoe = Product &amp;&amp; Size\n</code></pre> <p>and now, using Interfaces:</p> <pre><code>interface Product {\n    id: number\n    name: string\n    price: number\n    quantity: number\n}\ninterface Shoe extends Product {\n    size: number\n}\n</code></pre> <p>Example of using Interface for defining function types:</p> <pre><code>interface Cart {\n    add: (product: Product)=&gt; void\n    remove: (id: number) =&gt; void\n    clear: () =&gt; void\n}\n</code></pre>"},{"location":"ReviewTypescript/#narrowing","title":"Narrowing","text":"<p>Due to the use of Union types, no shared properties between the types in the union would be detected as errors by TypeScript, if the developer tries to access them without narrowing the type:</p> <pre><code>interface Mario {\n    company: \"nintendo\"\n    nombre: string\n    saltar: () =&gt; void\n}\ninterface Sonic {\n    company: \"sega\"\n    nombre: string\n    corre: () =&gt; void\n}\ntype Character = Mario | Sonic\nfunction play(character: Character){\n    // THIS WILL GIVE AN ERROR\n    console.log(character.saltar())\n}\n</code></pre> <p>In the example above, the parameter <code>character</code>has been defined as an union of the types <code>Mario</code>and <code>Sonic</code>. Thus, when trying to access the property <code>saltar</code> of the interface <code>Mario</code>, TypeScript will return an error, because <code>character</code> could also be of type <code>Sonic</code>, and <code>Sonic</code> types don't have the <code>saltar</code>property.</p>"},{"location":"ReviewTypescript/#type-guard","title":"Type guard","text":"<pre><code>function checkIsSonic(character: Character): character is Sonic {\n    return(character as Sonic).corre !== undefined\n}\n</code></pre>"},{"location":"ReviewTypescript/#utility-types","title":"Utility types","text":""},{"location":"ReviewTypescript/#returntype","title":"ReturnType","text":"<p>Useful to retrieve the type of a function:</p> <pre><code>function createAddress() {\n    return {\n        planet: \"earth\",\n        city: \"Cali\"\n    }\n}\n\ntype Address = ReturnType&lt;typeof createAddress&gt;\n</code></pre> <p>Note that in the example above, TypeScript is doing inference on the return type of the function.</p>"},{"location":"ReviewTypescript/#react-with-typescript","title":"React with TypeScript","text":""},{"location":"ReviewTypescript/#props","title":"Props","text":"<p>To type the props in a React component, we can make use of the library <code>React.FC</code>. </p> <p>First we define an interface where the props types are defined:</p> <pre><code>interface Todo {\n    id: number\n    title: string\n}\ntype ListOfTodos = Todo[]\n\ninterface Props {\n    todos: ListOfTodos\n}\nfunction App: React.FC&lt;Props&gt; ({todos}){\n    //...\n}\n</code></pre> <p>The syntax <code>&lt;&gt;</code> in <code>React.FC&lt;Props&gt;</code> serves to pass a parameter having the type of the props.</p>"},{"location":"ReviewTypescript/#imports","title":"Imports","text":"<p>Let's say we define types and interface in a file called <code>types.d.ts</code> and we want to import in a given file. To import TypeScript types and interfaces, we must add the keyword <code>type</code> to the interface we are importing:</p> <p><pre><code>import { type ListOfTodos } from \"../types.d.ts\"\n</code></pre> or equivalently</p> <pre><code>import type { ListOfTodos } from \"../types.d.ts\"\n</code></pre>"},{"location":"ReviewTypescript/#typing-events","title":"Typing events","text":"<pre><code>const handleClick = (event: React.ChangeEvent&lt;HTMLInputElement&gt;): void=&gt;{\n    // Corpus\n}\n&lt;input onClick={(e)=&gt; handleClick(e)}&gt;\n</code></pre>"},{"location":"ReviewTypescript/#typing-states","title":"Typing states","text":"<p>We have to use the syntax <code>&lt;&gt;</code> after using the <code>useState</code> hook, to let TypeScript know that the inference it (probably) does on the initial value we pass to the hook is not always the type of the state. Precisely, in between <code>&lt;&gt;</code> we define the type for the state values.</p> <pre><code>const [filterState, setFilterState] = useState&lt;FilterValue&gt;(\"all\")\n</code></pre>"},{"location":"ReviewTypescript/#more","title":"More","text":"<p><code>as const</code></p> <pre><code>export const TODO_FILTERS = {\n    ALL: \"all\",\n    ACTIVE: \"active\",\n    COMPLETED: \"completed\"\n} as const\n</code></pre> <p>The keyword \"as cost\" in TypeScript, makes <code>TODO_FILTERS</code> (in the example above) a read-only constant.</p> <p><code>typeof</code></p> <p>Get the types of an existing dictionary <code>TODO_FILTERS</code></p> <pre><code>typeof TODO_FILTERS[keyof typeof TODO_FILTERS]\n</code></pre> <p><code>! operator</code></p> <p>Add <code>!</code> at the end of a variable/const to tell TypeScript that the const will take a value when it hesitates between a given type and <code>undefined</code>.</p>"},{"location":"ShirtPrinting/","title":"Packages used","text":"<ul> <li>Three.js</li> <li>React-Three-Fiber: Re</li> <li>React-Three-Drei: useful add-ons for React-Three-Fiber</li> <li>Maath: useful math helpers</li> <li>Voltio: Manage React state</li> <li>React-color: color picker</li> <li>Framer-motion: animations.</li> </ul>"},{"location":"Shopping-cart/","title":"To-do E-Commerce functionality","text":"<ul> <li>Can show a list of product comming from a JSON</li> <li>Items can be filtered by category</li> <li>Items can be filtered by price</li> </ul>"},{"location":"Shopping-cart/#to-do-shopping-cart-functionality","title":"To-do Shopping Cart functionality","text":"<ul> <li>Items can be added to cart</li> <li>Items can be removed from cart</li> <li>Quantity of an item can be changed</li> <li>Stock of items will be updated accordingly to cart information.</li> <li>Save the cart information between page refreshings in a localStorage.</li> </ul>"},{"location":"Tic-tac-toe/","title":"Tic tac toe project","text":""},{"location":"ToDo/","title":"Install packages","text":"<p>The styles that will be used for the web app can be installed by running:</p> <pre><code>npm install todomvc-app-css\n</code></pre>"},{"location":"ToDo/#logic-progress","title":"Logic progress","text":"<p>First create the functionality to remove an item, and use prop drilling to pass the function to the <code>Todos</code> component and then to the <code>Todo</code> component:</p> <pre><code>// App.tsx\n//...\n    const newTodos = todos.filter((todo) =&gt; {\n      todo.id !== id;\n    });\n    setTodos(newTodos);\n  };\n//...\n</code></pre>"},{"location":"Twitter-follow-card/","title":"Twitter card project","text":""}]}